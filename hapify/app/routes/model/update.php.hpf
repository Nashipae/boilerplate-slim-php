<?php 

/**
 * Update <<M AA>>.
 */
 
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Valitron\Validator as Validator;
use App\Library\HttpException;
 
$_func = function (Request $request, Response $response, array $args) {

<<? Au !gs>>
 
    //Authentication
    check_auth($request);
<<?>>
 
    $model = App\Models\<<M AA>>::find($args['id']);
 
    if ($model == null) {
        // Entity was not found
        throw new HttpException(404, '<<M A>> not found');
    }
 
    $data = $request->getParsedBody();
    
    //Form validation
    $validator = new Validator($data);
<<@ F /rs/in f>>
    $validator->rule('optional', '<<f a_a>>'<<? f nu>>, true <<?>>)<<=validator(f)>>;
<<@>>

<<? F rs/in>>
 
    // For admins only
    if ($request->getAttribute('fromAdmin')) {
    <<@ F rs/in f>>
        $validator->rule('optional', '<<f a_a>>'<<? f nu>>, true <<?>>)<<=validator(f)>>;
    <<@>>
    } else {
    <<@ F rs/in f>>
        unset($data['<<f a_a>>']);
    <<@>>
    }
<<?>>
 
    if ($validator->validate()) {
 
        try {
 
            $model->fill($data);
            $model->save();
 
            return $response->withStatus(204);
    
        } catch (\Exception $e) {
    
            if ($e->getCode() == 23000) {
                // Deal with duplicate key error
                throw new HttpException(409, $e->getMessage());
            }
            throw HttpException::internal($e);
        }
    }
    // Bad payload request
    throw HttpException::badRequest($validator);
};
 
//Define admin route callback
$app->patch('/admin/<<M a_a>>/{id}', $_func);
<<? Au [ow>>
//Define route callback
$app->patch('/<<M a_a>>/{id}', $_func);
<<?>>
<<< 
function validator(f) {
    
    if (f.type === "boolean") return "->rule('boolean', '" + f.name + "')";
    else if (f.type === "string") {
        if (f.subtype === "email") return "->rule('email', '" + f.name + "')";
        else if (f.subtype === "password") return "->rule('lengthMin', '" + f.name + "', 6)";
    }
    else if (f.type === "number" || f.type === "datetime") {
        if (f.subtype === "latitude") return "->rules(array('min' => array('"+ f.name +"', -90), 'max' => array('"+ f.name +"', 90)))";
        else if (f.subtype === "longitude") return "->rules(array('min' => array('"+ f.name +"', -180), 'max' => array('"+ f.name +"', 180)))";
    }
    else if (f.type === "entity") return "->rule('lengthMax', '" + f.name + "', 24)";
    
    return '';
}
>>>