<?php 
 
/**
 * Create <<M a>>.
 * Returns the created <<M a>>.
 */
 
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Valitron\Validator as Validator;
use App\Library\HttpException;
 
$_func = function (Request $request, Response $response, array $args) {

<<? Ac !gs>>
 
    //Authentication
    check_auth($request);
<<?>>
    
    $data = $request->getParsedBody();
 
    //Form validation
    $validator = new Validator($data);
<<@ F /rs/in f>>
    $validator->rule('required', '<<f a_a>>'<<? f nu>>, true <<?>>)<<=validator(f)>>;
<<@>>

<<? F rs/in>>
 
    // For admins only
    if ($request->getAttribute('fromAdmin')) {
    <<@ F rs/in f>>
        $validator->rule('required', '<<f a_a>>'<<? f nu>>, true <<?>>)<<=validator(f)>>;
    <<@>>
    }
<<?>>
 
    if ($validator->validate()) {
    
        try {
    
            $model = App\Models\<<M AA>>::create(array(
<<@ F /rs/in f>>
                '<<f a_a>>' => $data['<<f a_a>>'],
<<@>>
<<? F rs/in>>
                // Init restricted fields
    <<@ F rs/in f>>
                '<<f a_a>>' => $request->getAttribute('fromAdmin') ? $data['<<f a_a>>'] : <<=defaultValue(f)>>,
    <<@>>
<<?>>
<<? F in/pr>>
                // Init internal fields
    <<@ F in/pr f>>
                '<<f a_a>>' => <<=defaultValue(f)>>,
    <<@>>
<<?>>
            ));
 
            $payload = json_encode($model);
            $response->getBody()->write($payload);
 
            return $response->withStatus(201);
                        
        } catch (\Exception $e) {
            if ($e->getCode() == 23000) {
                // Deal with duplicate key error
                throw new HttpException(409, $e->getMessage());
            }
            throw HttpException::internal($e);
        }

    }
 
    // Bad payload request
    throw HttpException::badRequest($validator);
};
 
//Define admin route callback
$app->post('/admin/<<M a-a>>', $_func);
<<? Ac [ow>>
//Define route callback
$app->post('/<<M a-a>>', $_func);
<<?>>

<<< 
function defaultValue(f) {
    let v = "null";
    
    if (f.ownership) {
        v = f.multiple ? "array(1)" : "$request->getAttribute('userId')";
    }
    else if (f.multiple) v = "array()";
    else if (f.type === "boolean") v = "false";
    else if (f.type === "string") {
        if (f.names.snake === 'role') v = "'user'";
        else v = "''";
    }
    else if (f.type === "number") v = "0";
    else if (f.type === "datetime") v = "date('Y-m-d H:i:s')";
    else if (f.type === "object") v = "array()";

    return v;
}
function validator(f) {
    
    if (f.type === "boolean") return "->rule('boolean', '" + f.name + "')";
    else if (f.type === "string") {
        if (f.subtype === "email") return "->rule('email', '" + f.name + "')";
        else if (f.subtype === "password") return "->rule('lengthMin', '" + f.name + "', 6)";
    }
    else if (f.type === "number") {
        $return = "->rule('numeric', '" + f.name + "')";
        if (f.subtype === "latitude") $return += "->rules(array('min' => array('"+ f.name +"', -90), 'max' => array('"+ f.name +"', 90)))";
        else if (f.subtype === "longitude") $return += "->rules(array('min' => array('"+ f.name +"', -180), 'max' => array('"+ f.name +"', 180)))";
        return $return;
    }
    else if (f.type === "datetime") {
        return "->rule('integer', '" + f.name + "')";
    }
    else if (f.type === "entity") return "->rule('integer', '" + f.name + "')";
    
    return '';
}
>>>