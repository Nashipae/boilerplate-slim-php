<?php
 
require_once __DIR__ . '/../../../public/initialize.php';
require_once __DIR__ . '/../inc/helper.php';
 
use \Illuminate\Database\Schema\Blueprint;
 
/** @var \Illuminate\Database\Schema\Builder $schema */
$schema = $capsule::schema();
$schemaManager = $schema->getConnection()->getDoctrineSchemaManager();
 
// ==================================
// Create tables & columns
// ==================================
<<@ M m>>
 
// Create table for model <<m a>>
<<# Create a table for each models >>
if (!$schema->hasTable('<<m a_a>>')) {
    $schema->create('<<m a_a>>', function (Blueprint $table) {
        $table->increments('<<m.f.pr R>>');
    <<# Create a column for each fields excepted for primary key and many-to-many relations >>
    <<@ m.f /pr/ml f>>
        $table-><<= getColumnMethod(f)>>('<<f a_a>>'<<? f tE>>, false, true<<?>>)<<? f nu>>->nullable()<<?>>;
    <<@>>
    
        Helpers::output('', 'Did create table <<m a>>');
    });
}
    <<# If the model has at least one many-to-many relation, generate the following code block >>
    <<? m.f tE*ml>>
 
// Many-to-many relationships for model <<m a>>
        <<# For each many-to-many relation, create a relation table >>
        <<@ m.f tE*ml f>>
if (!$schema->hasTable('<<m a_a>>__<<f a_a>>')) {
    $schema->create('<<m a_a>>__<<f a_a>>', function (Blueprint $table) {
        $table->increments('<<m.f.pr R>>');
        $table->integer('<<m a_a>>', false, true);
        $table->integer('<<f.m a_a>>', false, true);
    
        Helpers::output('', 'Did create relationship table <<m a>> to <<f a>>');
    });
}
        <<@>>
    <<?>>
<<@>>

// ==================================
// Create indexes
// ==================================
<<@ M m>>
 
<<# Create a table for each models >>
// Create indexes for model <<m a>>
$schema->table('<<m a_a>>', function (Blueprint $table) {
    global $schemaManager;
    $tableDetails = $schemaManager->listTableDetails($table->getTable());

    <<# 
        Create basic index for fields that are searchable or sortable
        excepted for primary key and entity relations (one-to-one or many-to-many)
    >>
    <<@ m.f (se+so)/pr/tE f>>
 
    if (!$tableDetails->hasIndex('<<m a_a>>_<<f a_a>>')) {
        $table->index('<<f a_a>>', '<<m a_a>>_<<f a_a>>');
        Helpers::output('', 'Did create index <<m a_a>>_<<f a_a>>');
    }
    <<@>>

    <<# 
        If the model has at least one unique field,
        create a single unique index that contains all unique fields
    >>
    <<? m.f un/pr/(tE*ml)>>
 
    if (!$tableDetails->hasIndex('<<m a_a>>__uniques')) {
        $table->unique([<<@ m.f un/pr/(tE*ml) f>>'<<f a_a>>', <<@>>], '<<m a_a>>__uniques');
        Helpers::output('', 'Did create index <<m a_a>>__uniques');
    }
    <<?>>

    <<# Create foreign key contraints for fields that are one-to-one entity relation >>
    <<@ m.f tE/ml f>>
 
    if (!$tableDetails->hasIndex('<<m a_a>>_<<f a_a>>__foreign')) {
        $table->foreign('<<f a_a>>', '<<m a_a>>_<<f a_a>>__foreign')->references('<<f.m.f.pr R>>')->on('<<f.m a_a>>');
        Helpers::output('', 'Did create index <<m a_a>>_<<f a_a>>__foreign');
    }
    <<@>>

});

    <<# Create foreign key contraints in relation table for fields that are many-to-many entity relation >>
    <<? m.f tE*ml>>
        <<@ m.f tE*ml f>>
// Many-to-many relationships for field <<m a>>.<<f a>>
$schema->table('<<m a_a>>__<<f a_a>>', function (Blueprint $table) {
    global $schemaManager;
    $tableDetails = $schemaManager->listTableDetails($table->getTable());
 
    if (!$tableDetails->hasIndex('<<m a_a>>')) {
        $table->foreign('<<m a_a>>', '<<m a_a>>')->references('<<m.f.pr R>>')->on('<<m a_a>>')->onDelete('cascade');
        Helpers::output('', 'Did create relationship index for <<m a_a>>__<<f a_a>>.<<m a>>');
    }
    if (!$tableDetails->hasIndex('<<f.m a_a>>')) {
        $table->foreign('<<f.m a_a>>', '<<f.m a_a>>')->references('<<f.m.f.pr R>>')->on('<<f.m a_a>>')->onDelete('cascade');
        Helpers::output('', 'Did create relationship index for <<m a_a>>__<<f a_a>>.<<f.m a>>');
    }
 
});
        <<@>>
    <<?>>

<<@>>

<<< 
function getColumnMethod(f) {
    if (f.type === 'boolean') {
        return 'boolean';
    } else if (f.type === 'number') {
        return f.subtype === null || f.subtype === 'integer' ? 'integer' : 'float';
    } else if (f.type === 'string') {
        if (f.subtype === 'text') return 'text';
        else if (f.subtype === 'rich') return 'longText';
        return 'string';
    } else if (f.type === 'datetime') {
        if (f.subtype === 'date') return 'date';
        else if (f.subtype === 'time') return 'time';
        return 'datetime';
    } else if (f.type === 'object') {
        return 'json';
    } else if (f.type === 'file') {
        return 'string';
    } else if (f.type === 'entity') {
        return 'integer'
    } else {
        return 'string';
    }
}
>>>
