<?php
 
namespace App\Models;
 
use Psr\Http\Message\ServerRequestInterface as Request;
 
class <<M AA>> extends BaseModel {
 
	/**
     * The table associated with the model.
     *
     * @var string
     */
   	protected $table = '<<M a_a>>';
 
   	/**
     * The attributes that are mass assignable.
     *
     * @var array
     */
   	protected $fillable = array(
<<# Define all non-internal and not multiple relations fields as settable values >>
<<@ F /in/(tE*ml) f>>
        '<<f a_a>>',
<<@>>
   	);
 
   	/**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = array(
<<# Define all hidden fields as hidden >>
<<@ F hd f>>
        '<<f a_a>>',
<<@>>
    );

<<# Loop over every non-internal password fields and hash them when saving >>
<<@ F tSp/in f>>
 
    /**
     * Set the field <<f a>>.
     *
     * @param  string  $value
     */
    public function set<<f AA>>Attribute($value)
    {
        $this->attributes['<<f a_a>>'] = \App\Library\Encryption::hash($value);
    }
<<@>>

<<# Loop over every datetime fields and convert to timestamp when getting the value >>
<<@ F tD f>>
 
    /**
     * Get the field <<f a>>.
     *
     * @return integer
     */
    public function get<<f AA>>Attribute()
    {
        return $this->dateToTimestamp('<<f a_a>>');
    }
<<@>>

<<# Loop over every boolean fields and convert to boolean when setting the value >>
<<@ F tB f>>
 
    /**
     * Get the field <<f a>>.
     *
     * @return integer
     */
    public function get<<f AA>>Attribute()
    {
        return $this->intToBoolean('<<f a_a>>');
    }
<<@>>

<<# Loop over every object fields and convert from/to JSON when setting/getting the value >>
<<@ F tO f>>
 
    /**
     * Get the field <<f a>>.
     *
     * @return mixed
     */
    public function get<<f AA>>Attribute()
    {
        return json_decode($this->attributes['<<f a_a>>']);
    }
 
    /**
     * Set the field <<f a>>.
     *
     * @param  mixed  $value
     */
    public function set<<f AA>>Attribute($value)
    {
        $this->attributes['<<f a_a>>'] = json_encode($value);
    }
<<@>>
 
    /**
     * Get search cursor
     * @param  array $filter
     * @param  Request $request
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public static function getCursor($filter, Request $request) {
    
        unset($filter['_page']);
        unset($filter['_limit']);
        unset($filter['_order']);
        unset($filter['_sort']);
    
        $query = <<M AA>>::query();

<<# Loop over every searchable fields and build the search query >>
<<@ F se f>>
    
    <<# If the field is an entity relation >>
    <<? f tE>>
        // Filter by related <<f a_a>>
        if (isset($filter['<<f a_a>>'])) {
        <<# In case of many-to-many relation >>
        <<? f ml >>
            $query = $query->whereHas('_<<f a_a>>', function(\Illuminate\Database\Eloquent\Builder $query) use ($filter) {
                $query->whereIn('<<f.m a_a>>', is_array($filter['<<f a_a>>']) ? $filter['<<f a_a>>'] : [$filter['<<f a_a>>']], 'and');
            });
        <<# In case of one-to-one relation >>
        <<??>>
            $query = $query->where('<<f a_a>>', $filter['<<f a_a>>']);
        <<?>>
        }
        <<# 
            If the search action is accessible as owner and the field is the ownership field,
            force the filter to equal the current user's id.
        >>
        <<? As ow>>
            <<? f os>>
        else if (!$request->getAttribute('fromAdmin') && $request->getAttribute('userId') !== null) {
            $query = $query->where('<<f a_a>>', '=', $request->getAttribute('userId'));
        }
            <<?>>
        <<?>>

    <<# If the field is NOT an entity relation >>
    <<??>>
        // Filter <<f a>>
        if (isset($filter['<<f a_a>>'])) {
        <<# If the field is type string and label, perform a %LIKE% search >>
        <<? f tS*lb>>
            $query = $query->where('<<f a_a>>', 'LIKE', "%{$filter['<<f a_a>>']}%");
        <<# If the field is a boolean, convert to boolean >>
        <<?? f tB>>
            $query = $query->where('<<f a_a>>', static::toBoolean($filter['<<f a_a>>']));
        <<# If the field is a date, convert timestamp to date >>
        <<?? f tD>>
            $query = $query->where('<<f a_a>>', static::toDate($filter['<<f a_a>>']));
        <<# Otherwise>>
        <<??>>
            $query = $query->where('<<f a_a>>', $filter['<<f a_a>>']);
        <<?>>
        }

    <<?>>

    <<# If the field is a number, add extra filters (min & max) for filtering by range >>
    <<? f tN>>
        // Set min for <<f a>> if defined
        if (isset($filter['<<f a_a>>__min'])) {
            $query = $query->where('<<f a_a>>', '>=', $filter['<<f a_a>>__min']);
        }
        // Set max for <<f a>> if defined
        if (isset($filter['<<f a_a>>__max'])) {
            $query = $query->where('<<f a_a>>', '<=', $filter['<<f a_a>>__max']);
        }
    <<?>>

    <<# If the field is a date, add extra filters (min & max) and convert timestamp to date >>
    <<? f tD>>
        // Set min for <<f a>> if defined
        if (isset($filter['<<f a_a>>__min'])) {
            $query = $query->where('<<f a_a>>', '>=', static::toDate($filter['<<f a_a>>__min']));
        }
        // Set max for <<f a>> if defined
        if (isset($filter['<<f a_a>>__max'])) {
            $query = $query->where('<<f a_a>>', '<=', static::toDate($filter['<<f a_a>>__max']));
        }
    <<?>>

<<@>>
    
        return $query;
    }

<<# Foreach entity relation field, add a method to get the populated relationship >>
<<@ F tE f>>
 
    /**
     * Return relationship for <<f a>>
    <<? f ml>>
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
    <<??>>
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
    <<?>>
     */
    public function _<<f a_a>>()
    {
    <<# In case of many-to-many relation >>
    <<? f ml>>
        return $this->belongsToMany('App\Models\<<f.m AA>>', '<<M a_a>>__<<f a_a>>', '<<M a_a>>', '<<f.m a_a>>');
    <<# In case of one-to-one relation >>
    <<??>>
        return $this->hasOne('App\Models\<<f.m AA>>', '<<f.m.f.pr R>>', '<<f a_a>>');
    <<?>>
    }
<<@>>
}