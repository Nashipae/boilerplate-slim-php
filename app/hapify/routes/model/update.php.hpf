<?php 

/**
 * Update <<M AA>>.
 *
 * Form validation used here is vlucas/valitron library.
 * For more information, you can read documentation here https://github.com/vlucas/valitron
 */
 
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Valitron\Validator as Validator;
 
$_func = function (Request $request, Response $response, array $args) {

<<? Au !gs>>
    //Authentication
    check_auth();
<<?>>
 
    $data = App\Models\<<M AA>>::find($args['id']);
 
    if ($data == null) {
        // Entity was not found
        return $response->withStatus(404);
    }
 
    $_data = $request->getParsedBody();
    //Form validation
    $validator = new Validator($_data);
<<@ F /rs/in f>>
    $validator->rule('required', '<<f a_a>>'<<? f nu>>, true <<?>>);
<<@>>
<<@ F /tS/rs/in f>>
    <<=validator(f, '$validator->', ';')>>
<<@>>
 
    if ($validator->validate()) {
 
        try {
<<@ F tSp/in p>>
            // Hash <<p a>>
            if ($_data['<<p a_a>>'] != '') {
                $_data['<<p a_a>>'] = md5($_data['<<p a_a>>']);
            }
<<@>>

<<@ F /rs/in f>>
            $data-><<f a_a>> = $_data['<<f a_a>>'];
<<@>>
    
            $data->save();
 
            return $response->withStatus(204);
    
        } catch (\Exception $e) {
    
            if ($e->getCode() == 23000) {
                // Deal with duplicate key error
                return $response->withStatus(409);
            }
        }
    }
    // Bad payload request
    return $response->withStatus(400);
};
 
//Define admin route callback
$app->patch('/admin/<<M a_a>>', $_func);
<<? Au [ow>>
//Define route callback
$app->patch('/<<M a_a>>', $_func);
<<?>>

<<< 
function validator(f) {
    
    if (f.type === "boolean") return "$validator->rule('boolean', '" + f.name + "');";
    else if (f.type === "string") {
        if (f.subtype === "email") return "$validator->rule('email', '" + f.name + "');";
        else if (f.subtype === "password") return "$validator->rule('lengthMin', '" + f.name + "', 6);";
    }
    else if (f.type === "number" || f.type === "datetime") {
        if (f.subtype === "latitude") return "$validator->rules(array('min' => array('"+ f.name +"', -90), 'max' => array('"+ f.name +"', 90)));";
        else if (f.subtype === "longitude") return "$validator->rules(array('min' => array('"+ f.name +"', -180), 'max' => array('"+ f.name +"', 180)));";
    }
    else if (f.type === "entity") return "$validator->rule('lengthMax', '" + f.name + "', 24);";
    
    return `/* No rule for property ${f.name} */`;
    
    // /* Multiple and nullable */
    // if (f.multiple) {
    //     out = `Joi.array().items(${out})`;
        
    //     out += f.nullable ? ";\n$validator->rule('min', " + f.name + ", 0);" : ";\n$validator->rules(array('min' => array('"+ f.name +"', -90), 'required' => array('"+ f.name +"'));";
    // } else {
    //     out += f.nullable ? ";\n$validator->rule('email', " + f.name + ", true);" : ";\n$validator->rule('required', '" + f.name + "');";
    // }
}
>>>